# -*- coding: utf-8 -*-
import streamlit as st
import google.generativeai as genai
import time

# --- Bloco 1: Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Aura - Chatbot de Apoio", page_icon="üíñ", layout="centered", initial_sidebar_state="collapsed"
)

# --- Bloco 2: T√≠tulo e Descri√ß√£o ---
st.title("üíñ Aura: Seu Companheiro Virtual")
st.caption("Um espa√ßo seguro para conversar e encontrar acolhimento. Lembre-se, sou uma IA, n√£o um terapeuta.")
st.divider()

# --- Bloco 3: Configura√ß√£o da API Key (MODIFICADO para Streamlit Cloud) ---
# Tenta ler a chave do gerenciador de segredos do Streamlit Cloud
try:
    # O nome 'GOOGLE_API_KEY' aqui deve ser EXATAMENTE o mesmo
    # que voc√™ usar√° nos segredos do Streamlit Cloud no Passo 3.
    GOOGLE_API_KEY_APP = st.secrets["GOOGLE_API_KEY"]
    genai.configure(api_key=GOOGLE_API_KEY_APP)
    api_key_configured_app = True
except KeyError:
    st.error("Ops! Parece que a Chave API do Google n√£o foi configurada nos 'Secrets' do Streamlit. Pe√ßa ajuda para configur√°-la nas defini√ß√µes do app.")
    st.stop()
except Exception as e:
    st.error(f"Erro inesperado ao configurar a API Key: {e}")
    st.stop()

# --- Bloco 4: Configura√ß√£o do Modelo Gemini ---
generation_config = { "temperature": 0.75, "top_p": 0.95, "top_k": 40, "max_output_tokens": 500 }
safety_settings = [ {"category": c, "threshold": "BLOCK_MEDIUM_AND_ABOVE"} for c in ["HARM_CATEGORY_HARASSMENT", "HARM_CATEGORY_HATE_SPEECH", "HARM_CATEGORY_SEXUALLY_EXPLICIT", "HARM_CATEGORY_DANGEROUS_CONTENT"]]

# --- Bloco 5: Instru√ß√£o do Sistema (Personalidade) ---
# (Cole aqui aquela instru√ß√£o longa do system_instruction que define a Aura)
system_instruction = """
Voc√™ √© um chatbot de apoio emocional chamado Aura. Seu objetivo principal √© oferecer um espa√ßo seguro, acolhedor e emp√°tico para que os usu√°rios possam expressar seus sentimentos, preocupa√ß√µes e desabafar. Voc√™ deve ser gentil, paciente e compreensivo em todas as intera√ß√µes.

**Sua Personalidade:**
*   **Emp√°tica:** Mostre que voc√™ entende e se importa com os sentimentos do usu√°rio. Use frases como "Sinto muito que voc√™ esteja passando por isso", "Imagino como isso deve ser dif√≠cil", "Faz sentido voc√™ se sentir assim".
*   **Acolhedora:** Crie um ambiente onde o usu√°rio se sinta √† vontade para compartilhar. Evite julgamentos.
*   **Paciente:** D√™ tempo ao usu√°rio para responder, n√£o o apresse.
*   **Positiva, mas realista:** Ofere√ßa palavras de encorajamento, mas evite otimismo t√≥xico ou solu√ß√µes f√°ceis. Reconhe√ßa a dor e a dificuldade.
*   **Focada no Usu√°rio:** Mantenha a conversa centrada nas necessidades e sentimentos do usu√°rio. Fa√ßa perguntas abertas para encorajar a express√£o.
*   **Segura:** Voc√™ N√ÉO √© um terapeuta profissional. Deixe isso claro se a conversa se aprofundar muito ou se o usu√°rio pedir conselhos m√©dicos ou psicol√≥gicos. Jamais forne√ßa diagn√≥sticos.

**O que N√ÉO fazer:**
*   N√£o dar conselhos m√©dicos, psicol√≥gicos ou financeiros.
*   N√£o fazer diagn√≥sticos de sa√∫de mental.
*   N√£o julgar o usu√°rio.
*   N√£o minimizar os sentimentos do usu√°rio.
*   N√£o fingir ser humano. Se perguntado, diga que √© uma IA treinada para apoio.
*   N√£o guardar informa√ß√µes pessoais identific√°veis (embora o hist√≥rico da conversa seja mantido na sess√£o).

**Situa√ß√µes de Risco (IMPORTANTE):**
*   Se o usu√°rio expressar pensamentos suicidas, automutila√ß√£o ou inten√ß√£o de machucar a si mesmo ou a outros (usando palavras-chave como "me matar", "suic√≠dio", "quero morrer", "me cortar", etc.), voc√™ DEVE interromper a conversa normal e fornecer a resposta padr√£o de encaminhamento para o CVV (Centro de Valoriza√ß√£o da Vida) ou servi√ßos de emerg√™ncia locais. N√£o tente dissuadir ou aconselhar diretamente sobre isso. Apenas forne√ßa o contato de ajuda profissional.

**Exemplo de Resposta Padr√£o de Risco (CVV):**
"Sinto muito que voc√™ esteja passando por um momento t√£o dif√≠cil e pensando nisso. √â muito importante buscar ajuda profissional agora. Por favor, entre em contato com o CVV (Centro de Valoriza√ß√£o da Vida) ligando para o n√∫mero 188. A liga√ß√£o √© gratuita e eles est√£o dispon√≠veis 24 horas por dia para conversar com voc√™ de forma sigilosa. Voc√™ n√£o est√° sozinho(a) e h√° pessoas prontas para te ouvir."

Responda sempre de forma concisa e centrada no usu√°rio. Adapte levemente suas respostas para n√£o parecerem repetitivas, mas mantenha a ess√™ncia emp√°tica e segura.
""" # << CERTIFIQUE-SE DE QUE ESTA INSTRU√á√ÉO EST√Å COMPLETA E CORRETA

# --- Bloco 6: Defini√ß√µes de Seguran√ßa (CVV) ---
keywords_risco = [ "me matar", "me mate", "suicidio", "suic√≠dio", "n√£o aguento mais viver", "quero morrer", "queria morrer", "quero sumir", "desistir de tudo", "acabar com tudo", "fazer mal a mim", "me cortar", "me machucar", "automutila√ß√£o" ]
resposta_risco_padrao = ( "Sinto muito que voc√™ esteja passando por um momento t√£o dif√≠cil e pensando nisso. √â muito importante buscar ajuda profissional agora. Por favor, entre em contato com o CVV (Centro de Valoriza√ß√£o da Vida) ligando para o n√∫mero 188. A liga√ß√£o √© gratuita e eles est√£o dispon√≠veis 24 horas por dia para conversar com voc√™ de forma sigilosa. Voc√™ n√£o est√° sozinho(a) e h√° pessoas prontas para te ouvir." )

# --- Bloco 7: Fun√ß√£o para Inicializar o Modelo ---
@st.cache_resource # Guarda o modelo na mem√≥ria para n√£o recarregar toda hora
def init_model():
    try:
        model = genai.GenerativeModel(
            "gemini-1.5-flash", # Modelo do Gemini
            generation_config=generation_config,
            safety_settings=safety_settings,
            system_instruction=system_instruction # Passa a personalidade aqui
        )
        return model
    except Exception as e:
        st.error(f"Erro grave ao carregar o modelo de IA: {e}")
        st.stop()
model = init_model()

# --- Bloco 8: Gerenciamento do Hist√≥rico da Conversa ---
# Cria a mem√≥ria da conversa se ela n√£o existir
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "assistant", "content": "Ol√°! Sou Aura. Como voc√™ est√° se sentindo hoje?"}]
# Inicia a sess√£o de chat com o Gemini se n√£o existir
if "chat_session" not in st.session_state:
     # N√£o precisa mais passar a system instruction aqui, j√° foi no init_model
    st.session_state.chat_session = model.start_chat(history=[])

# --- Bloco 9: Exibi√ß√£o do Hist√≥rico ---
# Mostra as mensagens antigas na tela
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# --- Bloco 10: Input e L√≥gica Principal ---
# Caixa para o usu√°rio digitar a mensagem
if prompt := st.chat_input("Digite sua mensagem aqui..."):
    # Adiciona a mensagem do usu√°rio ao hist√≥rico e mostra na tela
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Verifica se a mensagem cont√©m palavras de risco
    prompt_lower = prompt.lower() # Converte para min√∫sculas para facilitar a busca
    contem_risco = any(keyword in prompt_lower for keyword in keywords_risco)

    if contem_risco:
        # Se cont√©m risco, mostra a mensagem do CVV e N√ÉO envia para a IA
        with st.chat_message("assistant"):
            st.warning("Importante: Se voc√™ est√° pensando em se machucar, por favor, busque ajuda profissional imediatamente.")
            st.markdown(resposta_risco_padrao)
        # Adiciona a resposta de risco ao hist√≥rico
        st.session_state.messages.append({"role": "assistant", "content": resposta_risco_padrao})
    else:
        # Se N√ÉO cont√©m risco, envia para a IA processar
        try:
            with st.spinner("Aura est√° pensando... üí¨"): # Mostra mensagem de "carregando"
                response = st.session_state.chat_session.send_message(prompt)
            bot_response = response.text
            # Adiciona a resposta da IA ao hist√≥rico e mostra na tela
            st.session_state.messages.append({"role": "assistant", "content": bot_response})
            with st.chat_message("assistant"):
                # Efeito de digita√ß√£o para a resposta da IA
                message_placeholder = st.empty()
                full_response = ""
                for chunk in bot_response.split():
                    full_response += chunk + " "
                    time.sleep(0.05) # Pequena pausa para simular digita√ß√£o
                    message_placeholder.markdown(full_response + "‚ñå") # Mostra o cursor piscando
                message_placeholder.markdown(full_response) # Mostra a resposta completa

        except Exception as e:
            # Se der erro ao falar com a IA
            error_msg_user = f"Desculpe, ocorreu um problema t√©cnico ao processar sua mensagem. Tente novamente mais tarde."
            st.error(error_msg_user)
            # Adiciona uma mensagem de erro gen√©rica ao hist√≥rico
            error_response = "Sinto muito, tive um problema t√©cnico interno. üòî"
            st.session_state.messages.append({"role": "assistant", "content": error_response})
            print(f"ERRO DEBUG App: Falha Gemini - {e}") # Log t√©cnico (n√£o vis√≠vel ao usu√°rio)


# --- Bloco 11: Rodap√© ---
st.divider()
st.caption("Lembre-se: Aura √© uma IA, n√£o um terapeuta. Em caso de emerg√™ncia ou necessidade de apoio profissional, ligue para o CVV (188) ou procure um profissional de sa√∫de mental.")

# --- Fim do app.py ---